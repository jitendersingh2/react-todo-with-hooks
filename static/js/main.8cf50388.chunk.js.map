{"version":3,"sources":["components/Todo/index.js","components/Todo/Todo.js","components/Todos/index.js","components/Todos/Todos.js","components/TodoForm/index.js","components/TodoForm/TodoForm.js","constants.js","App.js","serviceWorker.js","index.js"],"names":["Todo","todo","index","completeTodo","removeTodo","className","style","textDecoration","isCompleted","text","onClick","Todos","todos","map","key","TodoForm","addTodo","useState","value","setValue","onSubmit","e","preventDefault","type","placeholder","onChange","target","TODOS","App","setTodos","newTodos","splice","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6TAEeA,MCCR,YAA0D,IAA1CC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,aAAcC,EAAc,EAAdA,WAChD,OACE,yBACEC,UAAU,OACVC,MAAO,CAAEC,eAAgBN,EAAKO,YAAc,eAAiB,KAE5DP,EAAKQ,KAEN,6BACE,4BAAQJ,UAAU,sBAAsBK,QAAS,kBAAMP,EAAaD,KAApE,YACA,4BAAQG,UAAU,oBAAoBK,QAAS,kBAAMN,EAAWF,KAAhE,QCXOS,ECCM,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOT,EAAV,EAAUA,aAAcC,EAAxB,EAAwBA,WAAxB,OACnB,oCACGQ,EAAMC,KAAI,SAACZ,EAAMC,GAAP,OACT,kBAAC,EAAD,CACEY,IAAKZ,EACLA,MAAOA,EACPD,KAAMA,EACNE,aAAcA,EACdC,WAAYA,S,MCTLW,MCCR,YAAgC,IAAZC,EAAW,EAAXA,QAAW,EACVC,mBAAS,IADC,mBAC7BC,EAD6B,KACtBC,EADsB,KAUpC,OACE,0BAAMC,SARa,SAAAC,GACnBA,EAAEC,iBACGJ,IACLF,EAAQE,GACRC,EAAS,OAKP,2BACEI,KAAK,OACLlB,UAAU,iBACVa,MAAOA,EACPM,YAAY,WACZC,SAAU,SAAAJ,GAAC,OAAIF,EAASE,EAAEK,OAAOR,YCpB5BS,EAAQ,CACnB,CACElB,KAAM,oBACND,aAAa,GAEf,CACEC,KAAM,wBACND,aAAa,GAEf,CACEC,KAAM,6BACND,aAAa,I,MC0BFoB,MA/Bf,WAAgB,IAAD,EACaX,mBAASU,GADtB,mBACNf,EADM,KACCiB,EADD,KAoBb,OACE,yBAAKxB,UAAU,OACb,4BAAQA,UAAU,cAAlB,qBACA,yBAAKA,UAAU,aACb,kBAAC,EAAD,CAAOO,MAAOA,EAAOT,aAhBN,SAAAD,GACnB,IAAM4B,EAAQ,YAAOlB,GACrBkB,EAAS5B,GAAOM,aAAc,EAC9BqB,EAASC,IAa4C1B,WAVpC,SAAAF,GACjB,IAAM4B,EAAQ,YAAOlB,GACrBkB,EAASC,OAAO7B,EAAO,GACvB2B,EAASC,MAQL,kBAAC,EAAD,CAAUd,QAtBA,SAAAP,GACd,IAAMqB,EAAQ,sBAAOlB,GAAP,CAAc,CAAEH,UAC9BoB,EAASC,SCCOE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8cf50388.chunk.js","sourcesContent":["import { Todo } from './Todo';\r\n\r\nexport default Todo;\r\n","import React from \"react\";\r\nimport './Todo.css';\r\n\r\nexport function Todo({ todo, index, completeTodo, removeTodo }) {\r\n  return (\r\n    <div\r\n      className=\"todo\"\r\n      style={{ textDecoration: todo.isCompleted ? \"line-through\" : \"\" }}\r\n    >\r\n      {todo.text}\r\n\r\n      <div>\r\n        <button className=\"btn complete-button\" onClick={() => completeTodo(index)}>Complete</button>\r\n        <button className=\"btn delete-button\" onClick={() => removeTodo(index)}>x</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { Todos } from './Todos';\r\n\r\nexport default Todos;\r\n","import React from \"react\";\r\nimport Todo from '../Todo';\r\n\r\nexport const Todos = ({ todos, completeTodo, removeTodo }) => (\r\n  <>\r\n    {todos.map((todo, index) => (\r\n      <Todo\r\n        key={index}\r\n        index={index}\r\n        todo={todo}\r\n        completeTodo={completeTodo}\r\n        removeTodo={removeTodo}\r\n      />\r\n    ))}\r\n  </>\r\n);\r\n","import { TodoForm } from './TodoForm';\r\n\r\nexport default TodoForm;\r\n","import React, { useState } from 'react';\r\nimport './TodoForm.css';\r\n\r\nexport function TodoForm({ addTodo }) {\r\n  const [value, setValue] = useState(\"\");\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    if (!value) return;\r\n    addTodo(value);\r\n    setValue(\"\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        className=\"add-todo-input\"\r\n        value={value}\r\n        placeholder=\"Add Todo\"\r\n        onChange={e => setValue(e.target.value)}\r\n      />\r\n    </form>\r\n  );\r\n}","export const TODOS = [\r\n  {\r\n    text: \"Learn about React\",\r\n    isCompleted: false\r\n  },\r\n  {\r\n    text: \"Meet friend for lunch\",\r\n    isCompleted: false\r\n  },\r\n  {\r\n    text: \"Build really cool todo app\",\r\n    isCompleted: false\r\n  }\r\n];","import React, { useState } from 'react';\r\nimport Todos from './components/Todos';\r\nimport TodoForm from './components/TodoForm';\r\nimport { TODOS } from './constants';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [todos, setTodos] = useState(TODOS);\r\n\r\n  const addTodo = text => {\r\n    const newTodos = [...todos, { text }];\r\n    setTodos(newTodos);\r\n  };\r\n\r\n  const completeTodo = index => {\r\n    const newTodos = [...todos];\r\n    newTodos[index].isCompleted = true;\r\n    setTodos(newTodos);\r\n  };\r\n\r\n  const removeTodo = index => {\r\n    const newTodos = [...todos];\r\n    newTodos.splice(index, 1);\r\n    setTodos(newTodos);\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <header className=\"app-header\">ADVANCED TODO APP</header>\r\n      <div className=\"todo-list\">\r\n        <Todos todos={todos} completeTodo={completeTodo} removeTodo={removeTodo} />\r\n        <TodoForm addTodo={addTodo} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}